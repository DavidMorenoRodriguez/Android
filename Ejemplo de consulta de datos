MAIN ACTIVITY

package com.example.ejemplovideo2;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity implements View.OnClickListener{

    private EditText tCodigo, tNombre;
    private Button bInsertar, bConsultar;
    private BDUsuarios bd;
    private RecyclerView listaUsuarios;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Ligamos los elementos gráficos
        tCodigo = findViewById(R.id.tCodigo);
        tNombre = findViewById(R.id.tNombre);
        bInsertar = findViewById(R.id.bInsertar);
        bConsultar = findViewById(R.id.bConsultar);
        listaUsuarios = findViewById(R.id.listaUsuarios);

        bd = new BDUsuarios(this);

        bInsertar.setOnClickListener(this);
        bConsultar.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch(v.getId())
        {
            case R.id.bInsertar:
                int codigo = Integer.valueOf(tCodigo.getText().toString());
                String nombre = tNombre.getText().toString();

                try
                {
                    bd.insertarUsuario(codigo, nombre);
                    Toast.makeText(getApplicationContext(), "Usuario insertado correctamete", Toast.LENGTH_SHORT).show();
                }
                catch (Exception e)
                {
                    Toast.makeText(getApplicationContext(), "Error: " + e.toString(), Toast.LENGTH_SHORT).show();
                    System.out.println("Error: " + e.toString());
                }

                break;
            case R.id.bConsultar:
                // Con esto el tamaño del recyclerwiew no cambiará
                listaUsuarios.setHasFixedSize(true);
                // Creo un layoutmanager para el recyclerview
                LinearLayoutManager llm = new LinearLayoutManager(this);
                listaUsuarios.setLayoutManager(llm);

                try
                {
                    ArrayList<Usuario> usuariostotales = bd.obtenerTodosUsuarios();

                    AdaptadorUsuarios adaptador = new AdaptadorUsuarios(this, usuariostotales);
                    listaUsuarios.setAdapter(adaptador);
                    adaptador.refrescar();
                }
                catch (Exception e)
                {
                    System.out.println("Error obteniendo los usuario: " + e.toString());
                }
                break;
        }
    }
}






USUARIO

package com.example.ejemplovideo2;

public class Usuario {
    private int codigo;
    private String nombre;

    public Usuario(int codigo, String nombre) {
        this.codigo = codigo;
        this.nombre = nombre;
    }

    public int getCodigo() {
        return codigo;
    }

    public void setCodigo(int codigo) {
        this.codigo = codigo;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    @Override
    public String toString() {
        return "Usuario{" +
                "codigo=" + codigo +
                ", nombre='" + nombre + '\'' +
                '}';
    }
}






BDUSUARIOS.JAVA

package com.example.ejemplovideo2;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;

public class BDUsuarios extends SQLiteOpenHelper
{
    private Context contexto;
    // Sentencia SQL para crear la tabla de Usuarios
    private final String SQLCREATE = "CREATE TABLE Usuarios (codigo INTEGER, nombre TEXT)";
    // Sentencia SQL para eliminar la tabla de Usuarios
    private final String SQLDROP = "DROP TABLE IF EXISTS Usuarios";
    // Base de datos
    private SQLiteDatabase bd = null;

    public static final int DATABASE_VERSION = 5;
    public static final String DATABASE_NAME = "DBUsuarios.db";

    /**
     * Constructor de la clase
     * @param contexto Contexto de la aplicación
     */
    public BDUsuarios(Context contexto)
    {
        super(contexto, DATABASE_NAME, null, DATABASE_VERSION);
        this.contexto = contexto;
    }

    @Override
    public void onCreate(SQLiteDatabase db)
    {
        db.execSQL(SQLCREATE);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int versionAnterior, int versionNueva)
    {
        db.execSQL(SQLDROP);
        db.execSQL(SQLCREATE);
    }

    public void cerrarBD()
    {
        if( bd != null )
            bd.close();
    }

    /**
     * Inserta un nuevo usuario en la base de datos
     * @param codigo Código del usuario
     * @param nombre Nombre del usuario
     * @throws Exception Esta excepción se lenzará si ocurre algún error en la inserción
     */
    public void insertarUsuario(int codigo, String nombre) throws Exception
    {
        // Obtengo los datos en modos de escritura
        bd = getWritableDatabase();
        // Si hemos abierto correctamente la base de datos
        if(bd != null)
        {
            long newRowId;
            try
            {
                // Creo un ContentValues con los valores a insertar
                ContentValues values = new ContentValues();
                values.put("codigo", codigo);
                values.put("nombre", nombre);
                // Inserta la nueva fila, devolviendo el valor de la clave
                // primaria de la nueva fila
                newRowId = bd.insert("Usuarios", "", values);
            }
            catch (Exception e)
            {
                throw new Exception(e.toString());
            }
        }
    }

    /**
     * Obtiene todos los usuarios de la base de datos
     * @return Array con todos los usuarios de la base de datos
     * @throws Exception Esta excepción saltará cuando ocurra algún error recuperando los datos
     */
    public ArrayList<Usuario> obtenerTodosUsuarios() throws Exception
    {
        ArrayList<Usuario> usuarios = new ArrayList<>();
        // Obtengo los datos en modo de lectura
        bd = getReadableDatabase();
        // Si hemos abierto correctamente la base de datos
        try
        {
            // Indico como quiero que se ordenen los resultados
            String sortOrder = "codigo ASC";
            // Creo el cursor de la consulta
            Cursor c = bd.query
                    (
                            "Usuarios",   // Tabla para consultar
                            null,       // Columnas a devolver
                            null,      // Columnas de la clausula WHERE
                            null,   // Valores de la columna de la clausula WHERE
                            null,       // Valores de la clausula GROUP BY
                            null,        // Valores de la clausula HAVING
                            sortOrder           // Orden de la clausula ORDER BY
                    );
            // Muestro los datos
            c.moveToFirst();
            if( c.getCount() > 0 )
            {
                do
                {
                    int codigo = c.getInt(0);
                    String nombre = c.getString(1);
                    usuarios.add(new Usuario(codigo, nombre));
                } while (c.moveToNext());
            }

            cerrarBD();

            return usuarios;
        }
        catch (Exception e)
        {
            throw new Exception(e.toString());
        }
    }
}






ADAPTADORUSUARIOS.JAVA

package com.example.ejemplovideo2;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.recyclerview.widget.RecyclerView;

import java.util.ArrayList;

public class AdaptadorUsuarios extends RecyclerView.Adapter<AdaptadorUsuarios.HolderUsuario> {

    public static class HolderUsuario extends RecyclerView.ViewHolder
    {
        TextView lCodigo, lNombre;
        HolderUsuario(View itemView)
        {
            super(itemView);
            lCodigo = itemView.findViewById(R.id.lCodigo);
            lNombre = itemView.findViewById(R.id.lNombre);
        }
    };

    private ArrayList<Usuario> usuarios;
    private Context contexto;

    public AdaptadorUsuarios(Context contexto, ArrayList<Usuario> usuarios)
    {
        this.contexto = contexto;
        this.usuarios = usuarios;
    }

    public void add(ArrayList<Usuario> datos)
    {
        usuarios.clear();
        usuarios.addAll(datos);
    }

    public void refrescar()
    {
        notifyDataSetChanged();
    }

    @Override
    public HolderUsuario onCreateViewHolder(ViewGroup parent, int viewType)
    {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_usuario, parent, false);
        HolderUsuario pvh = new HolderUsuario(v);
        return pvh;
    }

    @Override
    public void onBindViewHolder(HolderUsuario usuarioactual, int position)
    {
        usuarioactual.lCodigo.setText(String.valueOf(usuarios.get(position).getCodigo()));
        usuarioactual.lNombre.setText(usuarios.get(position).getNombre());
    }

    @Override
    public int getItemCount()
    {
        return usuarios.size();
    }

    @Override
    public void onAttachedToRecyclerView(RecyclerView recyclerView)
    {
        super.onAttachedToRecyclerView(recyclerView);
    }
}
